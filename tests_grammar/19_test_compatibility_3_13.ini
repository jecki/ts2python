[config]
ts2python.RenderAnonymous       = "local"
ts2python.UseTypeUnion          = True
ts2python.UseExplicitTypeAlias  = False
ts2python.UseTypeParameters     = True
ts2python.UseLiteralType        = True
ts2python.UseVariadicGenerics   = True
ts2python.UseNotRequired        = True
ts2python.AllowReadOnly         = True

[match:type_alias]
M1: """export type ProviderResult<readonly T, readonly U, V> = T | U | V | undefined | null | Thenable<T | U | V | undefined | null>;"""

[py:type_alias]
M1: """type ProviderResult[T, U, V] = ReadOnly[T] | ReadOnly[U] | V | None | Coroutine[ReadOnly[T] | ReadOnly[U] | V | None]"""


[match:declaration]
M1: "readonly hoverMessage?: MarkdownString | MarkedString | Array<MarkdownString | MarkedString>"
M2: "hoverMessage?: readonly MarkdownString | readonly MarkedString | Array<readonly MarkdownString | readonly MarkedString>"

[py:declaration]
M1: "hoverMessage: NotRequired[ReadOnly['MarkdownString | MarkedString | List[MarkdownString | MarkedString]']]"
M2: "hoverMessage: NotRequired[ReadOnly['MarkdownString'] | ReadOnly['MarkedString'] | List[ReadOnly['MarkdownString'] | ReadOnly['MarkedString']]]"


[match:function]
M1: "function diameter<readonly T>(d: T): number"
M2: "function diameter<T>(d: readonly T): number"

[py:function]
M1: """
    def diameter[T](d: ReadOnly[T]) -> float:
        pass"""
M2: """
    def diameter[T](d: ReadOnly[T]) -> float:
        pass"""


[match:interface]
M1: """interface Color {
        readonly red: decimal;
        readonly green: decimal;
        readonly blue: decimal;
        readonly alpha: decimal;
    }"""
M2: """interface Value {
        readonly val: integer | decimal | string;
    }"""
M3: """interface ProgressParams<readonly T> {
        token: ProgressToken;
        value: T;
    }"""
M4: """interface ProgressParams<readonly T> {
        token: ProgressToken;
        value: readonly T;
    }"""
M5: """interface ProgressParams<T> {
        token: ProgressToken;
        value: readonly T;
    }"""

[py:interface]
M1: """
    class Color(TypedDict):
        red: ReadOnly[float]
        green: ReadOnly[float]
        blue: ReadOnly[float]
        alpha: ReadOnly[float]"""
M2: """
    class Value(TypedDict):
        val: ReadOnly[int | float | str]"""
M3: """
    class ProgressParams[T](TypedDict):
        token: 'ProgressToken'
        value: ReadOnly[T]"""
M4: """
    class ProgressParams[T](TypedDict):
        token: 'ProgressToken'
        value: ReadOnly[T]"""
M5: """
    class ProgressParams[T](TypedDict):
        token: 'ProgressToken'
        value: ReadOnly[T]"""


[match:document]
M1: """export interface SemanticTokensDelta {
        readonly resultId?: string;
        edits: SemanticTokensEdit[];
    }

    export interface SemanticTokensEdit {
        start: uinteger;
        deleteCount: uinteger;
        data?: uinteger[];
    }"""

[py:document]
M1: """
    class SemanticTokensDelta(TypedDict):
        resultId: NotRequired[ReadOnly[str]]
        edits: List['SemanticTokensEdit']


    class SemanticTokensEdit(TypedDict):
        start: int
        deleteCount: int
        data: NotRequired[List[int]]"""


[match:root]
M1: ""


