[config]
ts2python.RenderAnonymous       = "local"
ts2python.UseTypeUnion          = True
ts2python.UseTypeParameters     = True
ts2python.UseLiteralType        = True
ts2python.UseVariadicGenerics   = True
ts2python.UseNotRequired        = True
ts2python.AllowReadOnly         = True

[match:interface]
M1: """interface ProgressParams<readonly T> {
        token: ProgressToken;
        value: T;
    }"""
M2: """interface ProgressParams<readonly T> {
        token: ProgressToken;
        value: readonly T;
    }"""
M3: """interface ProgressParams<T> {
        token: ProgressToken;
        value: readonly T;
    }"""

[match:type_alias]
M1: """export type ProviderResult<readonly T> = T | undefined | null | Thenable<T | undefined | null>;"""
M2: """export type ProviderResult<readonly T, readonly U, V> = T | U | V | undefined | null | Thenable<T | U | V | undefined | null>;"""
M3: """export type Maybe<readonly T> = T | null;"""

[match:declaration]
M1: "readonly hoverMessage?: MarkdownString | MarkedString | Array<MarkdownString | MarkedString>"
M2: "hoverMessage?: readonly MarkdownString | readonly MarkedString | Array<readonly MarkdownString | readonly MarkedString>"

[match:namespace]
M1: """export namespace tasks {
    		export function fetchTasks(filter?: TaskFilter): Thenable<Task[]>;
    		export function executeTask(task: Task): Thenable<TaskExecution>;
    		export const taskExecutions: readonly TaskExecution[];
    		export const onDidStartTask: Event<TaskStartEvent>;
    	}"""

[match:generic_type]
M1: """Thenable<boolean>"""
M2: """T<K, I>"""
M3: """T<K <J>, L>"""
M4: """T<K <readonly J>, L>"""

[match:type_parameters]
M1: """<T = unknown>"""
M2: """<T extends string>"""
M3: """<T extends CustomDocument = CustomDocument>"""

