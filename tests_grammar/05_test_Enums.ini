
[match:enum]
M1: '''export enum FoldingRangeKind {
        /**
         * Folding range for a comment
         */
        Comment = 'comment',
        /**
         * Folding range for a imports or includes
         */
        Imports = 'imports',
        /**
         * Folding range for a region (e.g. `#region`)
         */
        Region = 'region'
    }'''

M2: '''export enum PluginOutputType {
       path = 'path',
    }'''

M3: '''export enum PluginOutputType {
        'path',
    }'''

M4: '''export enum MilkyWay {
        earth, moon, stars,
    }'''

M5: '''export enum MilkyWay {
        'earth', 'moon', 'stars',
    }'''

[ast:enum]

[fail:enum]


[match:item]

[ast:item]

[fail:item]

[match:document]
M1: '''export namespace ErrorCodes {
        // Defined by JSON-RPC
        export const ParseError: integer = -32700;
        export const InvalidRequest: integer = -32600;
        export const MethodNotFound: integer = -32601;
        export const InvalidParams: integer = -32602;
        export const InternalError: integer = -32603;

        /**
         * This is the start range of JSON-RPC reserved error codes.
         * It doesn't denote a real error code. No LSP error codes should
         * be defined between the start and end range. For backwards
         * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
         * are left in the range.
         *
         * @since 3.16.0
         */
        export const jsonrpcReservedErrorRangeStart: integer = -32099;
        /** @deprecated use jsonrpcReservedErrorRangeStart */
        export const serverErrorStart: integer = jsonrpcReservedErrorRangeStart;

        /**
         * Error code indicating that a server received a notification or
         * request before the server received the `initialize` request.
         */
        export const ServerNotInitialized: integer = -32002;
        export const UnknownErrorCode: integer = -32001;

        /**
         * This is the end range of JSON-RPC reserved error codes.
         * It doesn't denote a real error code.
         *
         * @since 3.16.0
         */
        export const jsonrpcReservedErrorRangeEnd = -32000;
        /** @deprecated use jsonrpcReservedErrorRangeEnd */
        export const serverErrorEnd: integer = jsonrpcReservedErrorRangeEnd;

        /**
         * This is the start range of LSP reserved error codes.
         * It doesn't denote a real error code.
         *
         * @since 3.16.0
         */
        export const lspReservedErrorRangeStart: integer = -32899;

        /**
         * A request failed but it was syntactically correct, e.g the
         * method name was known and the parameters were valid. The error
         * message should contain human readable information about why
         * the request failed.
         *
         * @since 3.17.0
         */
        export const RequestFailed: integer = -32803;

        /**
         * The server cancelled the request. This error code should
         * only be used for requests that explicitly support being
         * server cancellable.
         *
         * @since 3.17.0
         */
        export const ServerCancelled: integer = -32802;

        /**
         * The server detected that the content of a document got
         * modified outside normal conditions. A server should
         * NOT send this error code if it detects a content change
         * in its unprocessed messages. The result even computed
         * on an older state might still be useful for the client.
         *
         * If a client decides that a result is not of any use anymore
         * the client should cancel the request.
         */
        export const ContentModified: integer = -32801;

        /**
         * The client has canceled a request and a server has detected
         * the cancel.
         */
        export const RequestCancelled: integer = -32800;

        /**
         * This is the end range of LSP reserved error codes.
         * It doesn't denote a real error code.
         *
         * @since 3.16.0
         */
        export const lspReservedErrorRangeEnd: integer = -32800;
    }'''

[py:document]
M1: '''class ErrorCodes(IntEnum):

        # Defined by JSON-RPC
        ParseError = -32700
        InvalidRequest = -32600
        MethodNotFound = -32601
        InvalidParams = -32602
        InternalError = -32603

        # This is the start range of JSON-RPC reserved error codes.
        # It doesn始t denote a real error code. No LSP error codes should
        # be defined between the start and end range. For backwards
        # compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
        # are left in the range.

        # @since 3.16.0
        jsonrpcReservedErrorRangeStart = -32099

        # @deprecated use jsonrpcReservedErrorRangeStart
        serverErrorStart = jsonrpcReservedErrorRangeStart

        # Error code indicating that a server received a notification or
        # request before the server received the `initialize` request.
        ServerNotInitialized = -32002
        UnknownErrorCode = -32001

        # This is the end range of JSON-RPC reserved error codes.
        # It doesn始t denote a real error code.

        # @since 3.16.0
        jsonrpcReservedErrorRangeEnd = -32000

        # @deprecated use jsonrpcReservedErrorRangeEnd
        serverErrorEnd = jsonrpcReservedErrorRangeEnd

        # This is the start range of LSP reserved error codes.
        # It doesn始t denote a real error code.

        # @since 3.16.0
        lspReservedErrorRangeStart = -32899

        # A request failed but it was syntactically correct, e.g the
        # method name was known and the parameters were valid. The error
        # message should contain human readable information about why
        # the request failed.

        # @since 3.17.0
        RequestFailed = -32803

        # The server cancelled the request. This error code should
        # only be used for requests that explicitly support being
        # server cancellable.

        # @since 3.17.0
        ServerCancelled = -32802

        # The server detected that the content of a document got
        # modified outside normal conditions. A server should
        # NOT send this error code if it detects a content change
        # in its unprocessed messages. The result even computed
        # on an older state might still be useful for the client.

        # If a client decides that a result is not of any use anymore
        # the client should cancel the request.
        ContentModified = -32801

        # The client has canceled a request and a server has detected
        # the cancel.
        RequestCancelled = -32800

        # This is the end range of LSP reserved error codes.
        # It doesn始t denote a real error code.

        # @since 3.16.0
        lspReservedErrorRangeEnd = -32800'''