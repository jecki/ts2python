[config]
ts2python.RenderAnonymous          = "local"
ts2python.UsePostponedEvaluation   = False
ts2python.UseTypeUnion             = False
ts2python.UseExplicitTypeAlias     = False
ts2python.UseTypeParameters        = False
ts2python.UseLiteralType           = False
ts2python.UseVariadicGenerics      = False
ts2python.UseNotRequired           = False
ts2python.AllowReadOnly            = False
ts2python.AssumeDeferredEvaluation = False


[match:document]
M1: """export interface TextDocument {
        readonly additionalCommonProperties?: Record<string, any>;
        save(): Thenable<boolean>;
    }


    interface Thenable<T> extends PromiseLike<T> { }

    export type DocumentSelector = DocumentFilter | string | ReadonlyArray<DocumentFilter | string>;"""

[py:document]
M1: """class TextDocument:
        additionalCommonProperties: Optional[Dict[str, Any]]

        def save(self) -> 'Thenable[bool]':
            pass

    T = TypeVar('T')

    PromiseLike = Iterable  # Admittedly, a very poor hack

    class Thenable(PromiseLike[T], Generic[T]):
        pass

    DocumentSelector = Union['DocumentFilter', str, List[Union['DocumentFilter', str]]]"""


[match:root]
M1: ""
