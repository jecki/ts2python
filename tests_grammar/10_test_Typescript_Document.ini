
[match:document]
M1*: """

    /**
     * Defines an integer number in the range of -2^31 to 2^31 - 1.
     */
    export type integer = number;

    /**
     * Defines an unsigned integer number in the range of 0 to 2^31 - 1.
     */
    export type uinteger = number;

    {
    start: { line: 5, character: 23 },
    end : { line: 6, character: 0 }
    }

    """

M2: """
    type DocumentUri = string;

    type URI = string;

    /**
     * Client capabilities specific to regular expressions.
     */
    export interface RegularExpressionsClientCapabilities {
        /**
         * The engine's name.
         */
        engine: string;

        /**
         * The engine's version.
         */
        version?: string;
    }

    export const EOL: string[] = ['\n', '\r\n', '\r'];

    interface Position {
        /**
         * Line position in a document (zero-based).
         */
        line: uinteger;

        /**
         * Character offset on a line in a document (zero-based). Assuming that
         * the line is represented as a string, the `character` value represents
         * the gap between the `character` and `character + 1`.
         *
         * If the character value is greater than the line length it defaults back
         * to the line length.
         */
        character: uinteger;
    }

    {
        start: { line: 5, character: 23 },
        end : { line: 6, character: 0 }
    }

    interface Range {
        /**
         * The range's start position.
         */
        start: Position;

        /**
         * The range's end position.
         */
        end: Position;
    }
    """
M4: """textDocument.codeAction.resolveSupport = { properties: ['edit'] };"""
M5: '''{ line: 2, startChar:  5, length: 3, tokenType: "property",
        tokenModifiers: ["private", "static"]
    },
    { line: 2, startChar: 10, length: 4, tokenType: "type", tokenModifiers: [] },
    { line: 5, startChar:  2, length: 7, tokenType: "class", tokenModifiers: [] }

    {
       tokenTypes: ['property', 'type', 'class'],
       tokenModifiers: ['private', 'static']
    }

    { line: 2, startChar:  5, length: 3, tokenType: 0, tokenModifiers: 3 },
    { line: 2, startChar: 10, length: 4, tokenType: 1, tokenModifiers: 0 },
    { line: 5, startChar:  2, length: 7, tokenType: 2, tokenModifiers: 0 }

    { deltaLine: 2, deltaStartChar: 5, length: 3, tokenType: 0, tokenModifiers: 3 },
    { deltaLine: 0, deltaStartChar: 5, length: 4, tokenType: 1, tokenModifiers: 0 },
    { deltaLine: 3, deltaStartChar: 2, length: 7, tokenType: 2, tokenModifiers: 0 }

    // 1st token,  2nd token,  3rd token
    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]

    { line: 3, startChar:  5, length: 3, tokenType: "property",
        tokenModifiers: ["private", "static"]
    },
    { line: 3, startChar: 10, length: 4, tokenType: "type", tokenModifiers: [] },
    { line: 6, startChar:  2, length: 7, tokenType: "class", tokenModifiers: [] }

    // 1st token,  2nd token,  3rd token
    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0]'''
M6: """interface InitializeParams extends WorkDoneProgressParams {
		processId: integer | null;
		clientInfo?: {
			name: string;
			version?: string;
		};
		locale?: string;
		rootPath?: string | null;
		rootUri: DocumentUri | null;
		initializationOptions?: any;
		capabilities: ClientCapabilities;
		trace?: TraceValue;
		workspaceFolders?: WorkspaceFolder[] | null;
    }"""
M7: """
    interface Position {
        line: uinteger;
        character: uinteger;
    }
    interface Range {
        start: Position;
        end: Position;
    }
    interface TextEdit {
        range: Range;
        newText: string;
    }
    export type ChangeAnnotationIdentifier = string;
    /* export interface AnnotatedTextEdit extends TextEdit {
        annotationId: ChangeAnnotationIdentifier;
    }*/
    export interface TextDocumentEdit {
        textDocument: string;
        edits: (TextEdit | AnnotatedTextEdit)[];
    }"""
M8: """import {ChangeInfo, CommentRange} from './rest-api';
	export declare interface ChecksPluginApi {
	  register(provider: ChecksProvider, config?: ChecksApiConfig): void;
	  announceUpdate(): void;
	  updateResult(run: CheckRun, result: CheckResult): void;
	}"""
M9: """import {ChartArea} from './geometric.js';

	export type LayoutPosition = 'left' | 'top' | 'right' | 'bottom' | 'center' | 'chartArea' | {[scaleId: string]: number};

	export interface LayoutItem {
	  position: LayoutPosition;
	  weight: number;
	  fullSize: boolean;
	  width: number;
	  height: number;
	  left: number;
	  top: number;
	  right: number;
	  bottom: number;

	  beforeLayout?(): void;
	  draw(chartArea: ChartArea): void;
	  getPadding?(): ChartArea;
	  isHorizontal(): boolean;
	  update(width: number, height: number, margins?: ChartArea): void;
	}"""

M10: """export namespace SymbolKind {
	export const File = 1;
	export const Module = 2;
	export const Namespace = 3;
	export const Package = 4;
	export const Class = 5;
	export const Method = 6;
	export const Property = 7;
	export const Field = 8;
	export const Constructor = 9;
	export const Enum = 10;
	export const Interface = 11;
	export const Function = 12;
	export const Variable = 13;
	export const Constant = 14;
	export const String = 15;
	export const Number = 16;
	export const Boolean = 17;
	export const Array = 18;
	export const Object = 19;
	export const Key = 20;
	export const Null = 21;
	export const EnumMember = 22;
	export const Struct = 23;
	export const Event = 24;
	export const Operator = 25;
	export const TypeParameter = 26;
}

export type SymbolKind = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
	14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26;"""

M11: """export type PositionEncodingKind = string;

    export namespace PositionEncodingKind {
        export const UTF8: PositionEncodingKind = 'utf-8';
        export const UTF16: PositionEncodingKind = 'utf-16';
        export const UTF32: PositionEncodingKind = 'utf-32';
    }"""

M12: """declare module 'vscode' {
	export class CancellationError extends Error {

		/**
		 * Creates a new cancellation error.
		 */
		constructor();
	}}"""

[ast:document]

[fail:document]

[py:document]
M10: """class SymbolKind(IntEnum):
        File = 1
        Module = 2
        Namespace = 3
        Package = 4
        Class = 5
        Method = 6
        Property = 7
        Field = 8
        Constructor = 9
        Enum = 10
        Interface = 11
        Function = 12
        Variable = 13
        Constant = 14
        String = 15
        Number = 16
        Boolean = 17
        Array = 18
        Object = 19
        Key = 20
        Null = 21
        EnumMember = 22
        Struct = 23
        Event = 24
        Operator = 25
        TypeParameter = 26

    # commented out, because there is already an enumeration with the same name
    # SymbolKind = int"""

M11: '''PositionEncodingKind = str

    class PositionEncodingKind(Enum):
        UTF8 = "utf-8"
        UTF16 = "utf-16"
        UTF32 = "utf-32"'''

M12: '''
    class CancellationError(Exception):
        pass'''
