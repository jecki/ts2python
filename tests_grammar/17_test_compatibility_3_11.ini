[config]
ts2python.RenderAnonymous          = "local"
ts2python.UsePostponedEvaluation   = False
ts2python.UseTypeUnion             = True
ts2python.UseExplicitTypeAlias     = True
ts2python.UseTypeParameters        = False
ts2python.UseLiteralType           = True
ts2python.UseVariadicGenerics      = True
ts2python.UseNotRequired           = True
ts2python.AllowReadOnly            = False
ts2python.AssumeDeferredEvaluation = False


[match:type_alias]
M1: """export type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;"""

[py:type_alias]
M1: """T = TypeVar('T')
    ProviderResult: TypeAlias = 'T | None | Thenable[T | None]'
    """

[match:function]
M1: "function diameter<readonly T>(d: T): number"
M2: "function diameter<T>(d: readonly T): number"

[py:function]
M1: """
	T = TypeVar('T')
	def diameter(d: T) -> float:
	    pass"""
M2: """
	T = TypeVar('T')
	def diameter(d: T) -> float:
	    pass"""

[match:interface]
M1: """interface ProgressParams<T> {
        token: ProgressToken;
        value: T;
    }"""
M2: """export interface Event<T> {
	    (listener: (e: T) => any, thisArgs?: any, disposables?: Disposable[]): Disposable;
	}"""
M3: """export class EventEmitter<T> {
		event: Event<T>;
		fire(data: T): void;
		dispose(): void;
	}"""

[py:interface]
M1: """T = TypeVar('T')

    class ProgressParams(TypedDict):
        token: 'ProgressToken'
        value: T
    """
M2: """T = TypeVar('T')

    class Event(Generic[T]):

        def __call__(self, listener: Callable[[T], Any], thisArgs: Optional[Any] = None, disposables: Optional[List['Disposable']] = None) -> 'Disposable':
            pass
    """
M3: """T = TypeVar('T')

    class EventEmitter(Generic[T]):
        event: 'Event[T]'

        def fire(self, data: T) -> None:
            pass

        def dispose(self) -> None:
            pass
    """

[match:document]
M1: """export namespace SymbolKind {
	export const File = 1;
	export const Module = 2;
	export const Namespace = 3;
	export const Package = 4;
	export const Class = 5;
	export const Method = 6;
	export const Property = 7;
	export const Field = 8;
	export const Constructor = 9;
	export const Enum = 10;
	export const Interface = 11;
	export const Function = 12;
	export const Variable = 13;
	export const Constant = 14;
	export const String = 15;
	export const Number = 16;
	export const Boolean = 17;
	export const Array = 18;
	export const Object = 19;
	export const Key = 20;
	export const Null = 21;
	export const EnumMember = 22;
	export const Struct = 23;
	export const Event = 24;
	export const Operator = 25;
	export const TypeParameter = 26;
}

export type SymbolKind = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
	14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26;"""

[py:document]
M1: """class SymbolKind(IntEnum):
        File = 1
        Module = 2
        Namespace = 3
        Package = 4
        Class = 5
        Method = 6
        Property = 7
        Field = 8
        Constructor = 9
        Enum = 10
        Interface = 11
        Function = 12
        Variable = 13
        Constant = 14
        String = 15
        Number = 16
        Boolean = 17
        Array = 18
        Object = 19
        Key = 20
        Null = 21
        EnumMember = 22
        Struct = 23
        Event = 24
        Operator = 25
        TypeParameter = 26

    # commented out, because there is already an enumeration with the same name
    # SymbolKind: TypeAlias = Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]"""

[match:root]
M1: ""
