[match:virtual_enum]
M1: """export namespace ErrorCodes {
        // Defined by JSON RPC
        export const ParseError: integer = -32700;
        export const InvalidRequest: integer = -32600;
        export const MethodNotFound: integer = -32601;
        export const InvalidParams: integer = -32602;
        export const InternalError: integer = -32603;
        export const jsonrpcReservedErrorRangeStart: integer = -32099;
    	export const serverErrorStart: integer = jsonrpcReservedErrorRangeStart;
        export const ServerNotInitialized: integer = -32002;
        export const UnknownErrorCode: integer = -32001;
	    export const jsonrpcReservedErrorRangeEnd = -32000;
	    export const serverErrorEnd: integer = jsonrpcReservedErrorRangeEnd;
	    export const lspReservedErrorRangeStart: integer = -32899;
	    export const ContentModified: integer = -32801;
	    export const RequestCancelled: integer = -32800;
	    export const lspReservedErrorRangeEnd: integer = -32800;
    }"""
M2: """export namespace DiagnosticSeverity {
            /**
             * Reports an error.
             */
            export const Error: 1 = 1;
            /**
             * Reports a warning.
             */
            export const Warning: 2 = 2;
            /**
             * Reports an information.
             */
            export const Information: 3 = 3;
            /**
             * Reports a hint.
             */
            export const Hint: 4 = 4;
        }"""
M3: """export namespace TokenFormat {
            export const Relative: 'relative' = 'relative';
        }"""
M4: """export namespace TextDocumentSyncKind {
            export const None = 0;
            export const Full = 1;
            export const Incremental = 2;
        }"""

[match:namespace]
M1: """export namespace tasks {
            export function registerTaskProvider(type: string, provider: TaskProvider): Disposable;
    		export function fetchTasks(filter?: TaskFilter): Thenable<Task[]>;
    		export function executeTask(task: Task): Thenable<TaskExecution>;
    		export const taskExecutions: readonly TaskExecution[];
    		export const onDidStartTask: Event<TaskStartEvent>;
    		export const onDidEndTask: Event<TaskEndEvent>;
    		export const onDidStartTaskProcess: Event<TaskProcessStartEvent>;
    		export const onDidEndTaskProcess: Event<TaskProcessEndEvent>;
    	}"""
M2: """export namespace ErrorCodes {
        // Defined by JSON-RPC
        export const ParseError: integer = -32700;
        export const InvalidRequest: integer = -32600;
        export const MethodNotFound: integer = -32601;
        export const InvalidParams: integer = -32602;
        export const InternalError: integer = -32603;

        /**
         * This is the start range of JSON-RPC reserved error codes.
         * It doesn't denote a real error code. No LSP error codes should
         * be defined between the start and end range. For backwards
         * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
         * are left in the range.
         *
         * @since 3.16.0
         */
        export const jsonrpcReservedErrorRangeStart: integer = -32099;
        /** @deprecated use jsonrpcReservedErrorRangeStart */
        export const serverErrorStart: integer = jsonrpcReservedErrorRangeStart;

        /**
         * Error code indicating that a server received a notification or
         * request before the server has received the `initialize` request.
         */
        export const ServerNotInitialized: integer = -32002;
        export const UnknownErrorCode: integer = -32001;

        /**
         * This is the end range of JSON-RPC reserved error codes.
         * It doesn't denote a real error code.
         *
         * @since 3.16.0
         */
        export const jsonrpcReservedErrorRangeEnd = -32000;
        /** @deprecated use jsonrpcReservedErrorRangeEnd */
        export const serverErrorEnd: integer = jsonrpcReservedErrorRangeEnd;

        /**
         * This is the start range of LSP reserved error codes.
         * It doesn't denote a real error code.
         *
         * @since 3.16.0
         */
        export const lspReservedErrorRangeStart: integer = -32899;

        /**
         * A request failed but it was syntactically correct, e.g the
         * method name was known and the parameters were valid. The error
         * message should contain human readable information about why
         * the request failed.
         *
         * @since 3.17.0
         */
        export const RequestFailed: integer = -32803;

        /**
         * The server cancelled the request. This error code should
         * only be used for requests that explicitly support being
         * server cancellable.
         *
         * @since 3.17.0
         */
        export const ServerCancelled: integer = -32802;

        /**
         * The server detected that the content of a document got
         * modified outside normal conditions. A server should
         * NOT send this error code if it detects a content change
         * in its unprocessed messages. The result even computed
         * on an older state might still be useful for the client.
         *
         * If a client decides that a result is not of any use anymore
         * the client should cancel the request.
         */
        export const ContentModified: integer = -32801;

        /**
         * The client has canceled a request and a server has detected
         * the cancel.
         */
        export const RequestCancelled: integer = -32800;

        /**
         * This is the end range of LSP reserved error codes.
         * It doesn't denote a real error code.
         *
         * @since 3.16.0
         */
        export const lspReservedErrorRangeEnd: integer = -32800;
    }"""

[py:namespace]
M1: """
    class tasks:
        def registerTaskProvider(type: str, provider: 'TaskProvider') -> 'Disposable':
            pass

        def fetchTasks(filter: Optional['TaskFilter'] = None) -> Coroutine[List['Task']]:
            pass

        def executeTask(task: 'Task') -> Coroutine['TaskExecution']:
            pass
        taskExecutions: List['TaskExecution']
        onDidStartTask: 'Event[TaskStartEvent]'
        onDidEndTask: 'Event[TaskEndEvent]'
        onDidStartTaskProcess: 'Event[TaskProcessStartEvent]'
        onDidEndTaskProcess: 'Event[TaskProcessEndEvent]'
    """
M2: """
    class ErrorCodes:
        ParseError: int = -32700
        InvalidRequest: int = -32600
        MethodNotFound: int = -32601
        InvalidParams: int = -32602
        InternalError: int = -32603
        jsonrpcReservedErrorRangeStart: int = -32099
        serverErrorStart: int = jsonrpcReservedErrorRangeStart
        ServerNotInitialized: int = -32002
        UnknownErrorCode: int = -32001
        jsonrpcReservedErrorRangeEnd: Any = -32000
        serverErrorEnd: int = jsonrpcReservedErrorRangeEnd
        lspReservedErrorRangeStart: int = -32899
        RequestFailed: int = -32803
        ServerCancelled: int = -32802
        ContentModified: int = -32801
        RequestCancelled: int = -32800
        lspReservedErrorRangeEnd: int = -32800
    """

[match:declarations_block]
M1*: """{
		/**
		 * The name of the function to which this breakpoint is attached.
		 */
		readonly functionName: string;

		/**
		 * Create a new function breakpoint.
		 */
		constructor(functionName: string, enabled?: boolean, condition?: string, hitCondition?: string, logMessage?: string);
	}"""
