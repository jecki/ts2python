[config]
ts2python.UseNotRequired = True
ts2python.UseLiteralType = True


[match:interface]
M1: """interface Message {
	       jsonrpc: string;
       }"""
M2: """interface RequestMessage extends Message {
            id: integer | string;
            method: string;
            params?: array | object;
        }"""
M3: """interface ProgressParams<T> {
            token: ProgressToken;
            value: T;
        }"""

M4*: """export interface WorkspaceEdit {
        changes?: { [uri: DocumentUri]: TextEdit[]; };

        documentChanges?: (
            TextDocumentEdit[] |
            (TextDocumentEdit | CreateFile | RenameFile | DeleteFile)[]
        );

        changeAnnotations?: {
            [id: string /* ChangeAnnotationIdentifier */]: ChangeAnnotation;
        };
    }"""

M5: """export interface ParameterInformation {
        label: string | [uinteger, uinteger];
        documentation?: string | MarkupContent;
    }"""
M6: """interface Color {
        readonly red: decimal;
        readonly green: decimal;
        readonly blue: decimal;
        readonly alpha: decimal;
    }"""
M7: """export interface SemanticTokensRegistrationOptions extends
        TextDocumentRegistrationOptions, SemanticTokensOptions,
        StaticRegistrationOptions {
    }"""
M8: """interface InitializeParams extends WorkDoneProgressParams {
		processId: integer | null;
		clientInfo?: {
			name: string;
			version?: string;
		};
		locale?: string;
		rootPath?: string | null;
		rootUri: DocumentUri | null;
		initializationOptions?: any;
		capabilities: ClientCapabilities;
		trace?: TraceValue;
		workspaceFolders?: WorkspaceFolder[] | null;
    }"""
M9: """interface SemanticTokensClientCapabilities {
		dynamicRegistration?: boolean;
		requests: {
			range?: boolean | {
			};
			full?: boolean | {
				delta?: boolean;
			};
		};
		tokenTypes: string[];
		tokenModifiers: string[];
		formats: TokenFormat[];
		overlappingTokenSupport?: boolean;
		multilineTokenSupport?: boolean;
    }"""
M10: """interface InitializeParams extends WorkDoneProgressParams {
		processId: integer | null;
		clientInfo?: {
			name: string;
			version?: string;
		};
		locale?: string;
		rootPath?: string | null;
		rootUri: DocumentUri | null;
		initializationOptions?: any;
		capabilities: ClientCapabilities;

		trace?: TraceValue;
		workspaceFolders?: WorkspaceFolder[] | null;
    }"""
M11: """interface DidChangeConfigurationParams {
			settings: any;
		}"""
M12: """export interface CodeAction {
		title: string;
		kind?: CodeActionKind;
		diagnostics?: Diagnostic[];
		isPreferred?: boolean;
		disabled?: {
			reason: string;
		};
		edit?: WorkspaceEdit;
		command?: Command;
		data?: any;
	}"""
M13: """export interface TextDocument {
		readonly uri: Uri;
		readonly fileName: string;
		readonly isUntitled: boolean;
		readonly languageId: string;
		readonly version: number;
		readonly isDirty: boolean;
		readonly isClosed: boolean;
		save(): Thenable<boolean>;
		readonly eol: EndOfLine;
		readonly lineCount: number;
		lineAt(line: number): TextLine;
		lineAt(position: Position): TextLine;
		offsetAt(position: Position): number;
		positionAt(offset: number): Position;
		getText(range?: Range): string;
		getWordRangeAtPosition(position: Position, regex?: RegExp): Range | undefined;
		validateRange(range: Range): Range;
		validatePosition(position: Position): Position;
	}"""
M14: """export interface Event<T> {
			(listener: (e: T) => any, thisArgs?: any, disposables?: Disposable[]): Disposable;
		}"""
M15: """export interface CustomEditorProvider<T extends CustomDocument = CustomDocument> extends CustomReadonlyEditorProvider<T> {
		readonly onDidChangeCustomDocument: Event<CustomDocumentEditEvent<T>> | Event<CustomDocumentContentChangeEvent<T>>;
		saveCustomDocument(document: T, cancellation: CancellationToken): Thenable<void>;
		saveCustomDocumentAs(document: T, destination: Uri, cancellation: CancellationToken): Thenable<void>;
		revertCustomDocument(document: T, cancellation: CancellationToken): Thenable<void>;
		backupCustomDocument(document: T, context: CustomDocumentBackupContext, cancellation: CancellationToken): Thenable<CustomDocumentBackup>;
	}"""
M16: """export interface WorkspaceUnchangedDocumentDiagnosticReport extends
        UnchangedDocumentDiagnosticReport {

        /**
         * The URI for which diagnostic information is reported.
         */
        uri: DocumentUri;

        /**
         * The version number for which the diagnostics are reported.
         * If the document is not marked as open `null` can be provided.
         */
        version: integer | null;
    };"""
M17: """interface I {
      k:
        | 1
        | 2
        | 3;
    }"""
M18: """export declare interface ChecksPluginApi {
    }"""

M19: """export interface LanguageConfiguration {
		comments?: CommentRule;
		brackets?: CharacterPair[];
		wordPattern?: RegExp;
		indentationRules?: IndentationRule;
		onEnterRules?: OnEnterRule[];
		__electricCharacterSupport?: {
			brackets?: any;
			docComment?: {
				scope: string;
				open: string;
				lineStart: string;
				close?: string;
			};
		};
		__characterPairSupport?: {
			autoClosingPairs: {
				open: string;
				close: string;
				notIn?: string[];
			}[];
		};
	}"""
M20: """export interface NotebookController {
		readonly id: string;
		readonly notebookType: string;
		supportedLanguages?: string[];
		label: string;
		description?: string;
		detail?: string;
		supportsExecutionOrder?: boolean;
		createNotebookCellExecution(cell: NotebookCell): NotebookCellExecution;
		executeHandler: (cells: NotebookCell[], notebook: NotebookDocument, controller: NotebookController) => void | Thenable<void>;
		interruptHandler?: (notebook: NotebookDocument) => void | Thenable<void>;
		readonly onDidChangeSelectedNotebooks: Event<{ notebook: NotebookDocument; selected: boolean }>;
		updateNotebookAffinity(notebook: NotebookDocument, affinity: NotebookControllerAffinity): void;
		dispose(): void;
	}"""
M21:  """export interface CancellationToken {
		isCancellationRequested: boolean;
		onCancellationRequested: Event<any>;
	}"""
M22: """export class CancellationError extends Error {
		constructor();
	}"""
M23: """export interface FileSystemWatcher extends Disposable {
		ignoreCreateEvents: boolean;
		ignoreChangeEvents: boolean;
		ignoreDeleteEvents: boolean;
		onDidCreate: Event<Uri>;
		onDidChange: Event<Uri>;
		onDidDelete: Event<Uri>;
	}"""
M24: """export class Position {
		readonly line: number;
		readonly character: number;
		constructor(line: number, character: number);
		isBefore(other: Position): boolean;
		isBeforeOrEqual(other: Position): boolean;
		isAfter(other: Position): boolean;
		isAfterOrEqual(other: Position): boolean;
		isEqual(other: Position): boolean;
		compareTo(other: Position): number;
		translate(lineDelta?: number, characterDelta?: number): Position;
		translate(change: { lineDelta?: number; characterDelta?: number }): Position;
		with(line?: number, character?: number): Position;
		with(change: { line?: number; character?: number }): Position;
	}"""
M25: """export interface Event<T> {
	    (listener: (e: T) => any, thisArgs?: any, disposables?: Disposable[]): Disposable;
	}"""
M26: """export class EventEmitter<T> {
		event: Event<T>;
		fire(data: T): void;
		dispose(): void;
	}"""
# "," as separator, bug #15
M27: """export interface ServiceHost { url: string, categories: Array<string>, }"""
M28: """interface CalendarJSON {
	  date: string;
	  fiscal: {
		month: MonthNumbers;
		quarter:
		  | { name: 'Q1'; value: 1 }
		  | { name: 'Q2'; value: 2 }
		  | { name: 'Q3'; value: 3 }
		  | { name: 'Q4'; value: 4 };
		week: WeekNumbers;
		year: CommonYears;
	  };
	  gregorian: {
		day_of_week:
		  | { name: 'Monday'; value: 0 }
		  | { name: 'Tuesday'; value: 1 }
		  | { name: 'Wednesday'; value: 2 }
		  | { name: 'Thursday'; value: 3 }
		  | { name: 'Friday'; value: 4 }
		  | { name: 'Saturday'; value: 5 }
		  | { name: 'Sunday'; value: 6 };
		month: MonthNumbers;
		quarter: QuarterNumbers;
		week: WeekNumbers;
		year: CommonYears;
	  };
	  id: string;
	}"""


[AST:interface]
M3: (interface
      (identifier "ProgressParams")
      (type_parameters
        (parameter_types
          (parameter_type
            (type_name
              (name "T")))))
      (declarations_block
        (declaration
          (qualifiers)
          (identifier "token")
          (types
            (type
              (type_name
                (name "ProgressToken")))))
        (declaration
          (qualifiers)
          (identifier "value")
          (types
            (type
              (type_name
                (name "T")))))))


[py:interface]
M7: """
	class SemanticTokensRegistrationOptions(TextDocumentRegistrationOptions, SemanticTokensOptions, StaticRegistrationOptions):
	    pass
    """
M9: """
	class SemanticTokensClientCapabilities(TypedDict):
	    class Requests_0(TypedDict):
	        class Range_1(TypedDict):
	            pass
	        class Full_1(TypedDict):
	            delta: NotRequired[bool]
	        range: NotRequired[Union[bool, Range_1]]
	        full: NotRequired[Union[bool, Full_1]]
	    dynamicRegistration: NotRequired[bool]
	    requests: Requests_0
	    tokenTypes: List[str]
	    tokenModifiers: List[str]
	    formats: List['TokenFormat']
	    overlappingTokenSupport: NotRequired[bool]
	    multilineTokenSupport: NotRequired[bool]
    """
M17: """
	class I(TypedDict):
	    k: Literal[1, 2, 3]
	"""
M25: """T = TypeVar('T')

    class Event(Generic[T]):

        def __call__(self, listener: Callable[[T], Any], thisArgs: Optional[Any] = None, disposables: Optional[List['Disposable']] = None) -> 'Disposable':
            pass
	"""
M26: """T = TypeVar('T')

    class EventEmitter(Generic[T]):
        event: 'Event[T]'

        def fire(self, data: T) -> None:
            pass

        def dispose(self) -> None:
            pass
	"""

[fail:interface]


[match:type_alias]
M1: """export type integer = number;"""
M2: """export type DiagnosticSeverity = 1 | 2 | 3 | 4;"""
M3: """export type ResourceOperationKind = 'create' | 'rename' | 'delete';"""
M4: """type MarkedString = string | { language: string; value: string };"""
M6: """export type TextDocumentContentChangeEvent = {
		range: Range;
		rangeLength?: uinteger;
		text: string;
	} | {
		text: string;
	};"""

[ast:type_alias]

[fail:type_alias]


[match:declarations_block]
M1: """{
		readonly webviewOptions?: WebviewPanelOptions;
		readonly supportsMultipleEditorsPerDocument?: boolean;
		}"""
M2: """{ dispose: () => any }"""
M3: """{ canPickMany: true }"""
M4: """{
		get<T>(section: string): T | undefined;
		get<T>(section: string, defaultValue: T): T;
		has(section: string): boolean;
		inspect<T>(section: string): {
			key: string;

			defaultValue?: T;
			globalValue?: T;
			workspaceValue?: T;
			workspaceFolderValue?: T;

			defaultLanguageValue?: T;
			globalLanguageValue?: T;
			workspaceLanguageValue?: T;
			workspaceFolderLanguageValue?: T;

			languageIds?: string[];

		} | undefined;
		update(section: string, value: any, configurationTarget?: ConfigurationTarget | boolean | null, overrideInLanguage?: boolean): Thenable<void>;
		readonly [key: string]: any;
	}"""

[ast:declarations_block]

[fail:declarations_block]


[match:declaration]
M1: """let activeTextEditor: TextEditor | undefined"""
M2: """readonly documentation?: ReadonlyArray<{
			readonly kind: CodeActionKind;
			readonly command: Command;
		}>"""

[ast:declaration]

[fail:declaration]

[py:declaration]
M2: """
	class Documentation_0(TypedDict):
    	kind: 'CodeActionKind'
        command: 'Command'
    documentation: NotRequired[List[Documentation_0]]"""


[match:function]
M1: """lineAt(line: number): TextLine"""
M2: """save(): Thenable<boolean>"""
M3: """edit(callback: (editBuilder: TextEditorEdit) => void, options?: { readonly undoStopBefore: boolean; readonly undoStopAfter: boolean }): Thenable<boolean>"""
M4: """function registerTextEditorCommand(command: string, callback: (textEditor: TextEditor, edit: TextEditorEdit, ...args: any[]) => void, thisArg?: any): Disposable"""
M5: """function identity<Type>(arg: Type): Type"""
M6: """function executeCommand<T = unknown>(command: string, ...rest: any[]): Thenable<T>"""
M7: """function registerCustomEditorProvider(viewType: string, provider: CustomTextEditorProvider | CustomReadonlyEditorProvider | CustomEditorProvider, options?: {
		readonly webviewOptions?: WebviewPanelOptions;
		readonly supportsMultipleEditorsPerDocument?: boolean;
		}): Disposable"""
M8: """static from(...disposableLikes: { dispose: () => any }[]): Disposable"""
M9: """function getSession(providerId: string, scopes: readonly string[], options: AuthenticationGetSessionOptions & { forceNewSession: true | { detail: string } }): Thenable<AuthenticationSession>"""
M10: """function getDiagnostics(): [Uri, Diagnostic[]][]"""
M11: """set(entries: ReadonlyArray<[Uri, readonly Diagnostic[] | undefined]>): void"""
M12: """constructor(taskDefinition: TaskDefinition, scope: WorkspaceFolder | TaskScope.Global | TaskScope.Workspace, name: string, source: string, execution?: ProcessExecution | ShellExecution | CustomExecution, problemMatchers?: string | string[])"""
M13: """function loggingIdentity<Type extends Lengthwise>(arg: Type): Type"""
M14: """function getProperty<Type, Key extends keyof Type>(obj: Type, key: Key)"""
M15: """function create<Type>(c: { new (): Type }): Type"""
M16: """function createInstance<A extends Animal>(c: new () => A): A"""
M17: """function create<T extends HTMLElement, U extends HTMLElement>(
	  element: T,
	  children: U[]
	): Container<T, U[]>"""
;M18: """function create<T extends HTMLElement = HTMLDivElement, U = T[]>(
;	  element?: T,
;	  children?: U
;	): Container<T, U>"""

[fail:function]
F1: """connection.client.register(DidChangeConfigurationNotification.type, undefined)"""

[match:optional]

[ast:optional]

[fail:optional]
