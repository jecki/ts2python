[config]
ts2python.RenderAnonymous       = "local"
ts2python.UseTypeUnion          = True
ts2python.UseTypeParameters     = True
ts2python.UseLiteralType        = True
ts2python.UseVariadicGenerics   = True
ts2python.UseNotRequired        = True
ts2python.AllowReadOnly         = False


[match:type_alias]
M1: """export type LSPAny = LSPObject | LSPArray | string | integer | uinteger |
	decimal | boolean | null;"""

[py:type_alias]
M1: """LSPAny = 'LSPObject | LSPArray | str | int | float | bool | None'"""


[match:interface]
M1: """interface OptionalValue {
	       option?: integer | string;
       }"""
M2: """interface ProgressParams<T> {
        token: ProgressToken;
        value: T;
    }"""
M3: """interface PromiseLike<T> {
      then<TResult1 = T, TResult2 = never>(
        onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
      ): PromiseLike<TResult1 | TResult2>;
    }"""

[py:interface]
M1: """class OptionalValue(TypedDict):
	    option: NotRequired[int | str]"""
M2: """class ProgressParams[T](TypedDict):
        token: 'ProgressToken'
        value: T"""
M3: """class PromiseLike[T]:

        def then[TResult1, TResult2](self, onfulfilled: Optional[Callable[[T], 'TResult1 | PromiseLike[TResult1]'] | None] = None, onrejected: Optional[Callable[[Any], 'TResult2 | PromiseLike[TResult2]'] | None] = None) -> 'PromiseLike[TResult1 | TResult2]':
            pass"""
