[config]
ts2python.RenderAnonymous = "toplevel"
ts2python.UseTypeUnion    = "True"
ts2python.UseNotRequired = True
ts2python.UseLiteralType = True


[match:interface]
M1: """interface InitializeResult {
		capabilities: ServerCapabilities;
		serverInfo?: {
			name: string;
			version?: string;
		};
	}"""
M2: """interface SemanticTokensClientCapabilities {
		dynamicRegistration?: boolean;
		requests: {
			range?: boolean | {
			};
			full?: boolean | {
				delta?: boolean;
			};
		};
		tokenTypes: string[];
		tokenModifiers: string[];
		formats: TokenFormat[];
		overlappingTokenSupport?: boolean;
		multilineTokenSupport?: boolean;
    }"""
M3: """export class Position {
		readonly line: number;
		readonly character: number;
		constructor(line: number, character: number);
		isBefore(other: Position): boolean;
		isBeforeOrEqual(other: Position): boolean;
		isAfter(other: Position): boolean;
		isAfterOrEqual(other: Position): boolean;
		isEqual(other: Position): boolean;
		compareTo(other: Position): number;
		translate(lineDelta?: number, characterDelta?: number): Position;
		translate(change: { lineDelta?: number; characterDelta?: number }): Position;
		with(line?: number, character?: number): Position;
		with(change: { line?: number; character?: number }): Position;
	}"""
M4: """export interface NotebookDocumentSyncOptions {
			notebookSelector: ({
				notebook: string | NotebookDocumentFilter;
				cells?: { language: string }[];
			} | {
				notebook?: string | NotebookDocumentFilter;
				cells: { language: string }[];
			})[];
			save?: boolean;
		}"""
M5: """interface Test {
    export function registerWebviewViewProvider(viewId: string, provider: WebviewViewProvider, options?: {
            readonly webviewOptions?: {
                readonly retainContextWhenHidden?: boolean;
            };
        }): Disposable;
    }"""
M6: """interface CalendarJSON {
	  date: string;
	  fiscal: {
		month: MonthNumbers;
		quarter:
		  | { name: 'Q1'; value: 1 }
		  | { name: 'Q2'; value: 2 }
		  | { name: 'Q3'; value: 3 }
		  | { name: 'Q4'; value: 4 };
		week: WeekNumbers;
		year: CommonYears;
	  };
	  gregorian: {
		day_of_week:
		  | { name: 'Monday'; value: 0 }
		  | { name: 'Tuesday'; value: 1 }
		  | { name: 'Wednesday'; value: 2 }
		  | { name: 'Thursday'; value: 3 }
		  | { name: 'Friday'; value: 4 }
		  | { name: 'Saturday'; value: 5 }
		  | { name: 'Sunday'; value: 6 };
		month: MonthNumbers;
		quarter: QuarterNumbers;
		week: WeekNumbers;
		year: CommonYears;
	  };
	  id: string;
	}"""

[py:interface]
M1: """class InitializeResult_ServerInfo_0(TypedDict):
        name: str
        version: NotRequired[str]

    class InitializeResult(TypedDict):
        capabilities: 'ServerCapabilities'
        serverInfo: NotRequired[InitializeResult_ServerInfo_0]"""

M2: """class SemanticTokensClientCapabilities_Requests_0_Range_1(TypedDict):
	    pass
	class SemanticTokensClientCapabilities_Requests_0_Full_1(TypedDict):
	    delta: NotRequired[bool]
	class SemanticTokensClientCapabilities_Requests_0(TypedDict):
	    range: NotRequired[bool | SemanticTokensClientCapabilities_Requests_0_Range_1]
	    full: NotRequired[bool | SemanticTokensClientCapabilities_Requests_0_Full_1]

	class SemanticTokensClientCapabilities(TypedDict):
	    dynamicRegistration: NotRequired[bool]
	    requests: SemanticTokensClientCapabilities_Requests_0
	    tokenTypes: List[str]
	    tokenModifiers: List[str]
	    formats: List['TokenFormat']
	    overlappingTokenSupport: NotRequired[bool]
	    multilineTokenSupport: NotRequired[bool]"""

M3: """class Position_TranslateChange_0(TypedDict):
        lineDelta: NotRequired[float]
        characterDelta: NotRequired[float]
    class Position_With_Change_0(TypedDict):
        line: NotRequired[float]
        character: NotRequired[float]

    class Position:
        line: float
        character: float

        def isBefore(self, other: 'Position') -> bool:
            pass

        def isBeforeOrEqual(self, other: 'Position') -> bool:
            pass

        def isAfter(self, other: 'Position') -> bool:
            pass

        def isAfterOrEqual(self, other: 'Position') -> bool:
            pass

        def isEqual(self, other: 'Position') -> bool:
            pass

        def compareTo(self, other: 'Position') -> float:
            pass

        @singledispatchmethod
        def translate(self, arg1) -> 'Position':
            raise TypeError(f'First argument {arg1} of single-dispatch function/method {name} has illegal type {type(arg1)}')

        @translate.register
        def _(self, lineDelta: Optional[float] = None, characterDelta: Optional[float] = None) -> 'Position':
            pass

        @translate.register
        def _(self, change: Position_TranslateChange_0) -> 'Position':
            pass

        @singledispatchmethod
        def with_(self, arg1) -> 'Position':
            raise TypeError(f'First argument {arg1} of single-dispatch function/method {name} has illegal type {type(arg1)}')

        @with_.register
        def _(self, line: Optional[float] = None, character: Optional[float] = None) -> 'Position':
            pass

        @with_.register
        def _(self, change: Position_With_Change_0) -> 'Position':
            pass"""

M4: """class NotebookDocumentSyncOptions_NotebookSelector_0_Cells_0(TypedDict):
	    language: str
	class NotebookDocumentSyncOptions_NotebookSelector_0(TypedDict):
	    notebook: 'str | NotebookDocumentFilter'
	    cells: NotRequired[List[NotebookDocumentSyncOptions_NotebookSelector_0_Cells_0]]
	class NotebookDocumentSyncOptions_NotebookSelector_1_Cells_0(TypedDict):
	    language: str
	class NotebookDocumentSyncOptions_NotebookSelector_1(TypedDict):
	    notebook: NotRequired['str | NotebookDocumentFilter']
	    cells: List[NotebookDocumentSyncOptions_NotebookSelector_1_Cells_0]

	class NotebookDocumentSyncOptions(TypedDict):
	    notebookSelector: List[NotebookDocumentSyncOptions_NotebookSelector_0 | NotebookDocumentSyncOptions_NotebookSelector_1]
	    save: NotRequired[bool]"""

M5: """class Test_RegisterWebviewViewProviderOptions_0_WebviewOptions_0(TypedDict):
	    retainContextWhenHidden: NotRequired[bool]
	class Test_RegisterWebviewViewProviderOptions_0(TypedDict):
	    webviewOptions: NotRequired[Test_RegisterWebviewViewProviderOptions_0_WebviewOptions_0]

	class Test:

	    def registerWebviewViewProvider(self, viewId: str, provider: 'WebviewViewProvider', options: Optional[Test_RegisterWebviewViewProviderOptions_0] = None) -> 'Disposable':
	        pass"""
M6: """class CalendarJSON_Fiscal_0_Quarter_0(TypedDict):
        name: Literal['Q1']
        value: Literal[1]
    class CalendarJSON_Fiscal_0_Quarter_1(TypedDict):
        name: Literal['Q2']
        value: Literal[2]
    class CalendarJSON_Fiscal_0_Quarter_2(TypedDict):
        name: Literal['Q3']
        value: Literal[3]
    class CalendarJSON_Fiscal_0_Quarter_3(TypedDict):
        name: Literal['Q4']
        value: Literal[4]
    class CalendarJSON_Fiscal_0(TypedDict):
        month: 'MonthNumbers'
        quarter: CalendarJSON_Fiscal_0_Quarter_0 | CalendarJSON_Fiscal_0_Quarter_1 | CalendarJSON_Fiscal_0_Quarter_2 | CalendarJSON_Fiscal_0_Quarter_3
        week: 'WeekNumbers'
        year: 'CommonYears'
    class CalendarJSON_Gregorian_0_Day_of_week_0(TypedDict):
        name: Literal['Monday']
        value: Literal[0]
    class CalendarJSON_Gregorian_0_Day_of_week_1(TypedDict):
        name: Literal['Tuesday']
        value: Literal[1]
    class CalendarJSON_Gregorian_0_Day_of_week_2(TypedDict):
        name: Literal['Wednesday']
        value: Literal[2]
    class CalendarJSON_Gregorian_0_Day_of_week_3(TypedDict):
        name: Literal['Thursday']
        value: Literal[3]
    class CalendarJSON_Gregorian_0_Day_of_week_4(TypedDict):
        name: Literal['Friday']
        value: Literal[4]
    class CalendarJSON_Gregorian_0_Day_of_week_5(TypedDict):
        name: Literal['Saturday']
        value: Literal[5]
    class CalendarJSON_Gregorian_0_Day_of_week_6(TypedDict):
        name: Literal['Sunday']
        value: Literal[6]
    class CalendarJSON_Gregorian_0(TypedDict):
        day_of_week: CalendarJSON_Gregorian_0_Day_of_week_0 | CalendarJSON_Gregorian_0_Day_of_week_1 | CalendarJSON_Gregorian_0_Day_of_week_2 | CalendarJSON_Gregorian_0_Day_of_week_3 | CalendarJSON_Gregorian_0_Day_of_week_4 | CalendarJSON_Gregorian_0_Day_of_week_5 | CalendarJSON_Gregorian_0_Day_of_week_6
        month: 'MonthNumbers'
        quarter: 'QuarterNumbers'
        week: 'WeekNumbers'
        year: 'CommonYears'

    class CalendarJSON(TypedDict):
        date: str
        fiscal: CalendarJSON_Fiscal_0
        gregorian: CalendarJSON_Gregorian_0
        id: str"""