[config]
ts2python.RenderAnonymous       = "local"
ts2python.UseTypeUnion          = True
ts2python.UseExplicitTypeAlias  = True
ts2python.UseTypeParameters     = True
ts2python.UseLiteralType        = True
ts2python.UseVariadicGenerics   = True
ts2python.UseNotRequired        = True
ts2python.AllowReadOnly         = True

[match:interface]
M0: """export interface WorkspaceConfiguration {
		inspect<T>(section: string): {
			key: string;
			defaultValue?: T;
			languageIds?: string[];
		} | undefined;
		readonly [key: string]: any;
	}"""
M1: """export interface WorkspaceConfiguration {
		inspect<T>(section: string): {
			key: string;
			defaultValue?: T;
			globalValue?: T;
			workspaceValue?: T;
			workspaceFolderValue?: T;
			defaultLanguageValue?: T;
			globalLanguageValue?: T;
			workspaceLanguageValue?: T;
			workspaceFolderLanguageValue?: T;
			languageIds?: string[];
		} | undefined;
		readonly [key: string]: any;
	}"""

M2: """export interface WorkspaceConfiguration {
		get<T>(section: string): T | undefined;
		get<T>(section: string, defaultValue: T): T;
		has(section: string): boolean;
		inspect<T>(section: string): {
			key: string;
			defaultValue?: T;
			globalValue?: T;
			workspaceValue?: T;
			workspaceFolderValue?: T;
			defaultLanguageValue?: T;
			globalLanguageValue?: T;
			workspaceLanguageValue?: T;
			workspaceFolderLanguageValue?: T;
			languageIds?: string[];
		} | undefined;
		update(section: string, value: any, configurationTarget?: ConfigurationTarget | boolean | null, overrideInLanguage?: boolean): Thenable<void>;
		readonly [key: string]: any;
	}"""

